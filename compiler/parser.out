Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    TRUE
    WHITE_SPACE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> declaracoes bloco
Rule 2     declaracoes -> def_const def_tipos def_var def_rot
Rule 3     def_const -> CONST constante SEMICOLON list_const
Rule 4     def_const -> empty
Rule 5     list_const -> constante SEMICOLON list_const
Rule 6     list_const -> empty
Rule 7     constante -> ID DOUBLEEQUALS const_valor
Rule 8     const_valor -> STRING
Rule 9     const_valor -> exp_mat
Rule 10    def_tipos -> TYPE tipo SEMICOLON list_tipos
Rule 11    def_tipos -> empty
Rule 12    list_tipos -> tipo SEMICOLON list_tipos
Rule 13    list_tipos -> empty
Rule 14    tipo -> ID DOUBLEEQUALS tipo_dado
Rule 15    tipo_dado -> INTEGER
Rule 16    tipo_dado -> REAL
Rule 17    tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado
Rule 18    tipo_dado -> RECORD campos END
Rule 19    tipo_dado -> ID
Rule 20    campos -> ID COLON tipo_dado
Rule 21    campos -> ID COLON tipo_dado SEMICOLON campos
Rule 22    def_var -> VAR variavel SEMICOLON list_var
Rule 23    def_var -> empty
Rule 24    list_var -> variavel SEMICOLON list_var
Rule 25    list_var -> empty
Rule 26    variavel -> ID lista_id COLON tipo_dado
Rule 27    lista_id -> COMMA ID lista_id
Rule 28    lista_id -> empty
Rule 29    def_rot -> nome_rotina def_var bloco def_rot
Rule 30    def_rot -> empty
Rule 31    nome_rotina -> FUNCTION ID param_rot COLON tipo_dado
Rule 32    nome_rotina -> PROCEDURE ID param_rot
Rule 33    param_rot -> LPAREN campos RPAREN
Rule 34    param_rot -> empty
Rule 35    bloco -> BEGIN comando SEMICOLON lista_com END
Rule 36    bloco -> COLON comando
Rule 37    lista_com -> comando SEMICOLON lista_com
Rule 38    lista_com -> empty
Rule 39    comando -> ID nome atrib
Rule 40    comando -> WHILE exp_logica DO bloco
Rule 41    comando -> IF exp_logica THEN bloco else
Rule 42    comando -> RETURN exp_logica
Rule 43    comando -> WRITE exp_mat
Rule 44    comando -> READ ID nome
Rule 45    else -> ELSE bloco
Rule 46    else -> empty
Rule 47    atrib -> ASSIGNMENT exp_mat
Rule 48    atrib -> empty
Rule 49    lista_param -> parametro COMMA lista_param
Rule 50    lista_param -> parametro
Rule 51    lista_param -> empty
Rule 52    op_logico -> MORETHAN
Rule 53    op_logico -> LESSTHAN
Rule 54    op_logico -> EQUALS
Rule 55    op_logico -> NOT
Rule 56    op_logico -> ARROW
Rule 57    op_logico -> LESSOREQUAL
Rule 58    exp_logica -> exp_mat op_logico exp_logica
Rule 59    exp_logica -> exp_mat
Rule 60    exp_mat -> parametro op_mat exp_mat
Rule 61    exp_mat -> parametro
Rule 62    op_mat -> PLUS
Rule 63    op_mat -> MINUS
Rule 64    op_mat -> TIMES
Rule 65    op_mat -> DIVIDE
Rule 66    parametro -> ID nome
Rule 67    parametro -> NUMBER
Rule 68    nome -> DOT ID nome
Rule 69    nome -> LSBRACKET parametro RSBRACKET
Rule 70    nome -> LPAREN lista_param RPAREN
Rule 71    nome -> empty
Rule 72    empty -> <empty>

Terminals, with rules where they appear

ARRAY                : 17
ARROW                : 56
ASSIGNMENT           : 47
BEGIN                : 35
COLON                : 20 21 26 31 36
COMMA                : 27 49
CONST                : 3
DIVIDE               : 65
DO                   : 40
DOT                  : 68
DOUBLEEQUALS         : 7 14
ELSE                 : 45
END                  : 18 35
EQUALS               : 54
FALSE                : 
FUNCTION             : 31
ID                   : 7 14 19 20 21 26 27 31 32 39 44 66 68
IF                   : 41
INTEGER              : 15
LESSOREQUAL          : 57
LESSTHAN             : 53
LPAREN               : 33 70
LSBRACKET            : 17 69
MINUS                : 63
MORETHAN             : 52
NOT                  : 55
NUMBER               : 17 67
OF                   : 17
PLUS                 : 62
PROCEDURE            : 32
READ                 : 44
REAL                 : 16
RECORD               : 18
RETURN               : 42
RPAREN               : 33 70
RSBRACKET            : 17 69
SEMICOLON            : 3 5 10 12 21 22 24 35 37
STRING               : 8
THEN                 : 41
TIMES                : 64
TRUE                 : 
TYPE                 : 10
VAR                  : 22
WHILE                : 40
WHITE_SPACE          : 
WRITE                : 43
error                : 

Nonterminals, with rules where they appear

atrib                : 39
bloco                : 1 29 40 41 45
campos               : 18 21 33
comando              : 35 36 37
const_valor          : 7
constante            : 3 5
declaracoes          : 1
def_const            : 2
def_rot              : 2 29
def_tipos            : 2
def_var              : 2 29
else                 : 41
empty                : 4 6 11 13 23 25 28 30 34 38 46 48 51 71
exp_logica           : 40 41 42 58
exp_mat              : 9 43 47 58 59 60
list_const           : 3 5
list_tipos           : 10 12
list_var             : 22 24
lista_com            : 35 37
lista_id             : 26 27
lista_param          : 49 70
nome                 : 39 44 66 68
nome_rotina          : 29
op_logico            : 58
op_mat               : 60
param_rot            : 31 32
parametro            : 49 50 60 61 69
programa             : 0
tipo                 : 10 12
tipo_dado            : 14 17 20 21 26 31
variavel             : 22 24

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . declaracoes bloco
    (2) declaracoes -> . def_const def_tipos def_var def_rot
    (3) def_const -> . CONST constante SEMICOLON list_const
    (4) def_const -> . empty
    (72) empty -> .

    CONST           shift and go to state 4
    TYPE            reduce using rule 72 (empty -> .)
    VAR             reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    programa                       shift and go to state 1
    declaracoes                    shift and go to state 2
    def_const                      shift and go to state 3
    empty                          shift and go to state 5

state 1

    (0) S' -> programa .



state 2

    (1) programa -> declaracoes . bloco
    (35) bloco -> . BEGIN comando SEMICOLON lista_com END
    (36) bloco -> . COLON comando

    BEGIN           shift and go to state 7
    COLON           shift and go to state 8

    bloco                          shift and go to state 6

state 3

    (2) declaracoes -> def_const . def_tipos def_var def_rot
    (10) def_tipos -> . TYPE tipo SEMICOLON list_tipos
    (11) def_tipos -> . empty
    (72) empty -> .

    TYPE            shift and go to state 10
    VAR             reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    def_tipos                      shift and go to state 9
    empty                          shift and go to state 11

state 4

    (3) def_const -> CONST . constante SEMICOLON list_const
    (7) constante -> . ID DOUBLEEQUALS const_valor

    ID              shift and go to state 13

    constante                      shift and go to state 12

state 5

    (4) def_const -> empty .

    TYPE            reduce using rule 4 (def_const -> empty .)
    VAR             reduce using rule 4 (def_const -> empty .)
    FUNCTION        reduce using rule 4 (def_const -> empty .)
    PROCEDURE       reduce using rule 4 (def_const -> empty .)
    BEGIN           reduce using rule 4 (def_const -> empty .)
    COLON           reduce using rule 4 (def_const -> empty .)


state 6

    (1) programa -> declaracoes bloco .

    $end            reduce using rule 1 (programa -> declaracoes bloco .)


state 7

    (35) bloco -> BEGIN . comando SEMICOLON lista_com END
    (39) comando -> . ID nome atrib
    (40) comando -> . WHILE exp_logica DO bloco
    (41) comando -> . IF exp_logica THEN bloco else
    (42) comando -> . RETURN exp_logica
    (43) comando -> . WRITE exp_mat
    (44) comando -> . READ ID nome

    ID              shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    RETURN          shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    comando                        shift and go to state 14

state 8

    (36) bloco -> COLON . comando
    (39) comando -> . ID nome atrib
    (40) comando -> . WHILE exp_logica DO bloco
    (41) comando -> . IF exp_logica THEN bloco else
    (42) comando -> . RETURN exp_logica
    (43) comando -> . WRITE exp_mat
    (44) comando -> . READ ID nome

    ID              shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    RETURN          shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    comando                        shift and go to state 21

state 9

    (2) declaracoes -> def_const def_tipos . def_var def_rot
    (22) def_var -> . VAR variavel SEMICOLON list_var
    (23) def_var -> . empty
    (72) empty -> .

    VAR             shift and go to state 23
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    def_var                        shift and go to state 22
    empty                          shift and go to state 24

state 10

    (10) def_tipos -> TYPE . tipo SEMICOLON list_tipos
    (14) tipo -> . ID DOUBLEEQUALS tipo_dado

    ID              shift and go to state 26

    tipo                           shift and go to state 25

state 11

    (11) def_tipos -> empty .

    VAR             reduce using rule 11 (def_tipos -> empty .)
    FUNCTION        reduce using rule 11 (def_tipos -> empty .)
    PROCEDURE       reduce using rule 11 (def_tipos -> empty .)
    BEGIN           reduce using rule 11 (def_tipos -> empty .)
    COLON           reduce using rule 11 (def_tipos -> empty .)


state 12

    (3) def_const -> CONST constante . SEMICOLON list_const

    SEMICOLON       shift and go to state 27


state 13

    (7) constante -> ID . DOUBLEEQUALS const_valor

    DOUBLEEQUALS    shift and go to state 28


state 14

    (35) bloco -> BEGIN comando . SEMICOLON lista_com END

    SEMICOLON       shift and go to state 29


state 15

    (39) comando -> ID . nome atrib
    (68) nome -> . DOT ID nome
    (69) nome -> . LSBRACKET parametro RSBRACKET
    (70) nome -> . LPAREN lista_param RPAREN
    (71) nome -> . empty
    (72) empty -> .

    DOT             shift and go to state 31
    LSBRACKET       shift and go to state 32
    LPAREN          shift and go to state 33
    ASSIGNMENT      reduce using rule 72 (empty -> .)
    SEMICOLON       reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    nome                           shift and go to state 30
    empty                          shift and go to state 34

state 16

    (40) comando -> WHILE . exp_logica DO bloco
    (58) exp_logica -> . exp_mat op_logico exp_logica
    (59) exp_logica -> . exp_mat
    (60) exp_mat -> . parametro op_mat exp_mat
    (61) exp_mat -> . parametro
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    exp_logica                     shift and go to state 35
    exp_mat                        shift and go to state 36
    parametro                      shift and go to state 37

state 17

    (41) comando -> IF . exp_logica THEN bloco else
    (58) exp_logica -> . exp_mat op_logico exp_logica
    (59) exp_logica -> . exp_mat
    (60) exp_mat -> . parametro op_mat exp_mat
    (61) exp_mat -> . parametro
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    exp_logica                     shift and go to state 40
    exp_mat                        shift and go to state 36
    parametro                      shift and go to state 37

state 18

    (42) comando -> RETURN . exp_logica
    (58) exp_logica -> . exp_mat op_logico exp_logica
    (59) exp_logica -> . exp_mat
    (60) exp_mat -> . parametro op_mat exp_mat
    (61) exp_mat -> . parametro
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    exp_logica                     shift and go to state 41
    exp_mat                        shift and go to state 36
    parametro                      shift and go to state 37

state 19

    (43) comando -> WRITE . exp_mat
    (60) exp_mat -> . parametro op_mat exp_mat
    (61) exp_mat -> . parametro
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    exp_mat                        shift and go to state 42
    parametro                      shift and go to state 37

state 20

    (44) comando -> READ . ID nome

    ID              shift and go to state 43


state 21

    (36) bloco -> COLON comando .

    $end            reduce using rule 36 (bloco -> COLON comando .)
    SEMICOLON       reduce using rule 36 (bloco -> COLON comando .)
    ELSE            reduce using rule 36 (bloco -> COLON comando .)
    FUNCTION        reduce using rule 36 (bloco -> COLON comando .)
    PROCEDURE       reduce using rule 36 (bloco -> COLON comando .)
    BEGIN           reduce using rule 36 (bloco -> COLON comando .)
    COLON           reduce using rule 36 (bloco -> COLON comando .)


state 22

    (2) declaracoes -> def_const def_tipos def_var . def_rot
    (29) def_rot -> . nome_rotina def_var bloco def_rot
    (30) def_rot -> . empty
    (31) nome_rotina -> . FUNCTION ID param_rot COLON tipo_dado
    (32) nome_rotina -> . PROCEDURE ID param_rot
    (72) empty -> .

    FUNCTION        shift and go to state 47
    PROCEDURE       shift and go to state 48
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    def_rot                        shift and go to state 44
    nome_rotina                    shift and go to state 45
    empty                          shift and go to state 46

state 23

    (22) def_var -> VAR . variavel SEMICOLON list_var
    (26) variavel -> . ID lista_id COLON tipo_dado

    ID              shift and go to state 50

    variavel                       shift and go to state 49

state 24

    (23) def_var -> empty .

    FUNCTION        reduce using rule 23 (def_var -> empty .)
    PROCEDURE       reduce using rule 23 (def_var -> empty .)
    BEGIN           reduce using rule 23 (def_var -> empty .)
    COLON           reduce using rule 23 (def_var -> empty .)


state 25

    (10) def_tipos -> TYPE tipo . SEMICOLON list_tipos

    SEMICOLON       shift and go to state 51


state 26

    (14) tipo -> ID . DOUBLEEQUALS tipo_dado

    DOUBLEEQUALS    shift and go to state 52


state 27

    (3) def_const -> CONST constante SEMICOLON . list_const
    (5) list_const -> . constante SEMICOLON list_const
    (6) list_const -> . empty
    (7) constante -> . ID DOUBLEEQUALS const_valor
    (72) empty -> .

    ID              shift and go to state 13
    TYPE            reduce using rule 72 (empty -> .)
    VAR             reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    constante                      shift and go to state 53
    list_const                     shift and go to state 54
    empty                          shift and go to state 55

state 28

    (7) constante -> ID DOUBLEEQUALS . const_valor
    (8) const_valor -> . STRING
    (9) const_valor -> . exp_mat
    (60) exp_mat -> . parametro op_mat exp_mat
    (61) exp_mat -> . parametro
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    STRING          shift and go to state 57
    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    const_valor                    shift and go to state 56
    exp_mat                        shift and go to state 58
    parametro                      shift and go to state 37

state 29

    (35) bloco -> BEGIN comando SEMICOLON . lista_com END
    (37) lista_com -> . comando SEMICOLON lista_com
    (38) lista_com -> . empty
    (39) comando -> . ID nome atrib
    (40) comando -> . WHILE exp_logica DO bloco
    (41) comando -> . IF exp_logica THEN bloco else
    (42) comando -> . RETURN exp_logica
    (43) comando -> . WRITE exp_mat
    (44) comando -> . READ ID nome
    (72) empty -> .

    ID              shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    RETURN          shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20
    END             reduce using rule 72 (empty -> .)

    comando                        shift and go to state 59
    lista_com                      shift and go to state 60
    empty                          shift and go to state 61

state 30

    (39) comando -> ID nome . atrib
    (47) atrib -> . ASSIGNMENT exp_mat
    (48) atrib -> . empty
    (72) empty -> .

    ASSIGNMENT      shift and go to state 63
    SEMICOLON       reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    atrib                          shift and go to state 62
    empty                          shift and go to state 64

state 31

    (68) nome -> DOT . ID nome

    ID              shift and go to state 65


state 32

    (69) nome -> LSBRACKET . parametro RSBRACKET
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    parametro                      shift and go to state 66

state 33

    (70) nome -> LPAREN . lista_param RPAREN
    (49) lista_param -> . parametro COMMA lista_param
    (50) lista_param -> . parametro
    (51) lista_param -> . empty
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER
    (72) empty -> .

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    RPAREN          reduce using rule 72 (empty -> .)

    lista_param                    shift and go to state 67
    parametro                      shift and go to state 68
    empty                          shift and go to state 69

state 34

    (71) nome -> empty .

    ASSIGNMENT      reduce using rule 71 (nome -> empty .)
    SEMICOLON       reduce using rule 71 (nome -> empty .)
    $end            reduce using rule 71 (nome -> empty .)
    ELSE            reduce using rule 71 (nome -> empty .)
    FUNCTION        reduce using rule 71 (nome -> empty .)
    PROCEDURE       reduce using rule 71 (nome -> empty .)
    BEGIN           reduce using rule 71 (nome -> empty .)
    COLON           reduce using rule 71 (nome -> empty .)
    PLUS            reduce using rule 71 (nome -> empty .)
    MINUS           reduce using rule 71 (nome -> empty .)
    TIMES           reduce using rule 71 (nome -> empty .)
    DIVIDE          reduce using rule 71 (nome -> empty .)
    MORETHAN        reduce using rule 71 (nome -> empty .)
    LESSTHAN        reduce using rule 71 (nome -> empty .)
    EQUALS          reduce using rule 71 (nome -> empty .)
    NOT             reduce using rule 71 (nome -> empty .)
    ARROW           reduce using rule 71 (nome -> empty .)
    LESSOREQUAL     reduce using rule 71 (nome -> empty .)
    DO              reduce using rule 71 (nome -> empty .)
    THEN            reduce using rule 71 (nome -> empty .)
    RSBRACKET       reduce using rule 71 (nome -> empty .)
    COMMA           reduce using rule 71 (nome -> empty .)
    RPAREN          reduce using rule 71 (nome -> empty .)


state 35

    (40) comando -> WHILE exp_logica . DO bloco

    DO              shift and go to state 70


state 36

    (58) exp_logica -> exp_mat . op_logico exp_logica
    (59) exp_logica -> exp_mat .
    (52) op_logico -> . MORETHAN
    (53) op_logico -> . LESSTHAN
    (54) op_logico -> . EQUALS
    (55) op_logico -> . NOT
    (56) op_logico -> . ARROW
    (57) op_logico -> . LESSOREQUAL

    DO              reduce using rule 59 (exp_logica -> exp_mat .)
    THEN            reduce using rule 59 (exp_logica -> exp_mat .)
    SEMICOLON       reduce using rule 59 (exp_logica -> exp_mat .)
    $end            reduce using rule 59 (exp_logica -> exp_mat .)
    ELSE            reduce using rule 59 (exp_logica -> exp_mat .)
    FUNCTION        reduce using rule 59 (exp_logica -> exp_mat .)
    PROCEDURE       reduce using rule 59 (exp_logica -> exp_mat .)
    BEGIN           reduce using rule 59 (exp_logica -> exp_mat .)
    COLON           reduce using rule 59 (exp_logica -> exp_mat .)
    MORETHAN        shift and go to state 72
    LESSTHAN        shift and go to state 73
    EQUALS          shift and go to state 74
    NOT             shift and go to state 75
    ARROW           shift and go to state 76
    LESSOREQUAL     shift and go to state 77

    op_logico                      shift and go to state 71

state 37

    (60) exp_mat -> parametro . op_mat exp_mat
    (61) exp_mat -> parametro .
    (62) op_mat -> . PLUS
    (63) op_mat -> . MINUS
    (64) op_mat -> . TIMES
    (65) op_mat -> . DIVIDE

    MORETHAN        reduce using rule 61 (exp_mat -> parametro .)
    LESSTHAN        reduce using rule 61 (exp_mat -> parametro .)
    EQUALS          reduce using rule 61 (exp_mat -> parametro .)
    NOT             reduce using rule 61 (exp_mat -> parametro .)
    ARROW           reduce using rule 61 (exp_mat -> parametro .)
    LESSOREQUAL     reduce using rule 61 (exp_mat -> parametro .)
    DO              reduce using rule 61 (exp_mat -> parametro .)
    THEN            reduce using rule 61 (exp_mat -> parametro .)
    SEMICOLON       reduce using rule 61 (exp_mat -> parametro .)
    $end            reduce using rule 61 (exp_mat -> parametro .)
    ELSE            reduce using rule 61 (exp_mat -> parametro .)
    FUNCTION        reduce using rule 61 (exp_mat -> parametro .)
    PROCEDURE       reduce using rule 61 (exp_mat -> parametro .)
    BEGIN           reduce using rule 61 (exp_mat -> parametro .)
    COLON           reduce using rule 61 (exp_mat -> parametro .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82

    op_mat                         shift and go to state 78

state 38

    (66) parametro -> ID . nome
    (68) nome -> . DOT ID nome
    (69) nome -> . LSBRACKET parametro RSBRACKET
    (70) nome -> . LPAREN lista_param RPAREN
    (71) nome -> . empty
    (72) empty -> .

    DOT             shift and go to state 31
    LSBRACKET       shift and go to state 32
    LPAREN          shift and go to state 33
    PLUS            reduce using rule 72 (empty -> .)
    MINUS           reduce using rule 72 (empty -> .)
    TIMES           reduce using rule 72 (empty -> .)
    DIVIDE          reduce using rule 72 (empty -> .)
    MORETHAN        reduce using rule 72 (empty -> .)
    LESSTHAN        reduce using rule 72 (empty -> .)
    EQUALS          reduce using rule 72 (empty -> .)
    NOT             reduce using rule 72 (empty -> .)
    ARROW           reduce using rule 72 (empty -> .)
    LESSOREQUAL     reduce using rule 72 (empty -> .)
    DO              reduce using rule 72 (empty -> .)
    THEN            reduce using rule 72 (empty -> .)
    SEMICOLON       reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)
    RSBRACKET       reduce using rule 72 (empty -> .)
    COMMA           reduce using rule 72 (empty -> .)
    RPAREN          reduce using rule 72 (empty -> .)

    nome                           shift and go to state 83
    empty                          shift and go to state 34

state 39

    (67) parametro -> NUMBER .

    PLUS            reduce using rule 67 (parametro -> NUMBER .)
    MINUS           reduce using rule 67 (parametro -> NUMBER .)
    TIMES           reduce using rule 67 (parametro -> NUMBER .)
    DIVIDE          reduce using rule 67 (parametro -> NUMBER .)
    MORETHAN        reduce using rule 67 (parametro -> NUMBER .)
    LESSTHAN        reduce using rule 67 (parametro -> NUMBER .)
    EQUALS          reduce using rule 67 (parametro -> NUMBER .)
    NOT             reduce using rule 67 (parametro -> NUMBER .)
    ARROW           reduce using rule 67 (parametro -> NUMBER .)
    LESSOREQUAL     reduce using rule 67 (parametro -> NUMBER .)
    DO              reduce using rule 67 (parametro -> NUMBER .)
    THEN            reduce using rule 67 (parametro -> NUMBER .)
    SEMICOLON       reduce using rule 67 (parametro -> NUMBER .)
    $end            reduce using rule 67 (parametro -> NUMBER .)
    ELSE            reduce using rule 67 (parametro -> NUMBER .)
    FUNCTION        reduce using rule 67 (parametro -> NUMBER .)
    PROCEDURE       reduce using rule 67 (parametro -> NUMBER .)
    BEGIN           reduce using rule 67 (parametro -> NUMBER .)
    COLON           reduce using rule 67 (parametro -> NUMBER .)
    RSBRACKET       reduce using rule 67 (parametro -> NUMBER .)
    COMMA           reduce using rule 67 (parametro -> NUMBER .)
    RPAREN          reduce using rule 67 (parametro -> NUMBER .)


state 40

    (41) comando -> IF exp_logica . THEN bloco else

    THEN            shift and go to state 84


state 41

    (42) comando -> RETURN exp_logica .

    SEMICOLON       reduce using rule 42 (comando -> RETURN exp_logica .)
    $end            reduce using rule 42 (comando -> RETURN exp_logica .)
    ELSE            reduce using rule 42 (comando -> RETURN exp_logica .)
    FUNCTION        reduce using rule 42 (comando -> RETURN exp_logica .)
    PROCEDURE       reduce using rule 42 (comando -> RETURN exp_logica .)
    BEGIN           reduce using rule 42 (comando -> RETURN exp_logica .)
    COLON           reduce using rule 42 (comando -> RETURN exp_logica .)


state 42

    (43) comando -> WRITE exp_mat .

    SEMICOLON       reduce using rule 43 (comando -> WRITE exp_mat .)
    $end            reduce using rule 43 (comando -> WRITE exp_mat .)
    ELSE            reduce using rule 43 (comando -> WRITE exp_mat .)
    FUNCTION        reduce using rule 43 (comando -> WRITE exp_mat .)
    PROCEDURE       reduce using rule 43 (comando -> WRITE exp_mat .)
    BEGIN           reduce using rule 43 (comando -> WRITE exp_mat .)
    COLON           reduce using rule 43 (comando -> WRITE exp_mat .)


state 43

    (44) comando -> READ ID . nome
    (68) nome -> . DOT ID nome
    (69) nome -> . LSBRACKET parametro RSBRACKET
    (70) nome -> . LPAREN lista_param RPAREN
    (71) nome -> . empty
    (72) empty -> .

    DOT             shift and go to state 31
    LSBRACKET       shift and go to state 32
    LPAREN          shift and go to state 33
    SEMICOLON       reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    nome                           shift and go to state 85
    empty                          shift and go to state 34

state 44

    (2) declaracoes -> def_const def_tipos def_var def_rot .

    BEGIN           reduce using rule 2 (declaracoes -> def_const def_tipos def_var def_rot .)
    COLON           reduce using rule 2 (declaracoes -> def_const def_tipos def_var def_rot .)


state 45

    (29) def_rot -> nome_rotina . def_var bloco def_rot
    (22) def_var -> . VAR variavel SEMICOLON list_var
    (23) def_var -> . empty
    (72) empty -> .

    VAR             shift and go to state 23
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    def_var                        shift and go to state 86
    empty                          shift and go to state 24

state 46

    (30) def_rot -> empty .

    BEGIN           reduce using rule 30 (def_rot -> empty .)
    COLON           reduce using rule 30 (def_rot -> empty .)


state 47

    (31) nome_rotina -> FUNCTION . ID param_rot COLON tipo_dado

    ID              shift and go to state 87


state 48

    (32) nome_rotina -> PROCEDURE . ID param_rot

    ID              shift and go to state 88


state 49

    (22) def_var -> VAR variavel . SEMICOLON list_var

    SEMICOLON       shift and go to state 89


state 50

    (26) variavel -> ID . lista_id COLON tipo_dado
    (27) lista_id -> . COMMA ID lista_id
    (28) lista_id -> . empty
    (72) empty -> .

    COMMA           shift and go to state 91
    COLON           reduce using rule 72 (empty -> .)

    lista_id                       shift and go to state 90
    empty                          shift and go to state 92

state 51

    (10) def_tipos -> TYPE tipo SEMICOLON . list_tipos
    (12) list_tipos -> . tipo SEMICOLON list_tipos
    (13) list_tipos -> . empty
    (14) tipo -> . ID DOUBLEEQUALS tipo_dado
    (72) empty -> .

    ID              shift and go to state 26
    VAR             reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    tipo                           shift and go to state 93
    list_tipos                     shift and go to state 94
    empty                          shift and go to state 95

state 52

    (14) tipo -> ID DOUBLEEQUALS . tipo_dado
    (15) tipo_dado -> . INTEGER
    (16) tipo_dado -> . REAL
    (17) tipo_dado -> . ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado
    (18) tipo_dado -> . RECORD campos END
    (19) tipo_dado -> . ID

    INTEGER         shift and go to state 98
    REAL            shift and go to state 99
    ARRAY           shift and go to state 100
    RECORD          shift and go to state 101
    ID              shift and go to state 96

    tipo_dado                      shift and go to state 97

state 53

    (5) list_const -> constante . SEMICOLON list_const

    SEMICOLON       shift and go to state 102


state 54

    (3) def_const -> CONST constante SEMICOLON list_const .

    TYPE            reduce using rule 3 (def_const -> CONST constante SEMICOLON list_const .)
    VAR             reduce using rule 3 (def_const -> CONST constante SEMICOLON list_const .)
    FUNCTION        reduce using rule 3 (def_const -> CONST constante SEMICOLON list_const .)
    PROCEDURE       reduce using rule 3 (def_const -> CONST constante SEMICOLON list_const .)
    BEGIN           reduce using rule 3 (def_const -> CONST constante SEMICOLON list_const .)
    COLON           reduce using rule 3 (def_const -> CONST constante SEMICOLON list_const .)


state 55

    (6) list_const -> empty .

    TYPE            reduce using rule 6 (list_const -> empty .)
    VAR             reduce using rule 6 (list_const -> empty .)
    FUNCTION        reduce using rule 6 (list_const -> empty .)
    PROCEDURE       reduce using rule 6 (list_const -> empty .)
    BEGIN           reduce using rule 6 (list_const -> empty .)
    COLON           reduce using rule 6 (list_const -> empty .)


state 56

    (7) constante -> ID DOUBLEEQUALS const_valor .

    SEMICOLON       reduce using rule 7 (constante -> ID DOUBLEEQUALS const_valor .)


state 57

    (8) const_valor -> STRING .

    SEMICOLON       reduce using rule 8 (const_valor -> STRING .)


state 58

    (9) const_valor -> exp_mat .

    SEMICOLON       reduce using rule 9 (const_valor -> exp_mat .)


state 59

    (37) lista_com -> comando . SEMICOLON lista_com

    SEMICOLON       shift and go to state 103


state 60

    (35) bloco -> BEGIN comando SEMICOLON lista_com . END

    END             shift and go to state 104


state 61

    (38) lista_com -> empty .

    END             reduce using rule 38 (lista_com -> empty .)


state 62

    (39) comando -> ID nome atrib .

    SEMICOLON       reduce using rule 39 (comando -> ID nome atrib .)
    $end            reduce using rule 39 (comando -> ID nome atrib .)
    ELSE            reduce using rule 39 (comando -> ID nome atrib .)
    FUNCTION        reduce using rule 39 (comando -> ID nome atrib .)
    PROCEDURE       reduce using rule 39 (comando -> ID nome atrib .)
    BEGIN           reduce using rule 39 (comando -> ID nome atrib .)
    COLON           reduce using rule 39 (comando -> ID nome atrib .)


state 63

    (47) atrib -> ASSIGNMENT . exp_mat
    (60) exp_mat -> . parametro op_mat exp_mat
    (61) exp_mat -> . parametro
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    exp_mat                        shift and go to state 105
    parametro                      shift and go to state 37

state 64

    (48) atrib -> empty .

    SEMICOLON       reduce using rule 48 (atrib -> empty .)
    $end            reduce using rule 48 (atrib -> empty .)
    ELSE            reduce using rule 48 (atrib -> empty .)
    FUNCTION        reduce using rule 48 (atrib -> empty .)
    PROCEDURE       reduce using rule 48 (atrib -> empty .)
    BEGIN           reduce using rule 48 (atrib -> empty .)
    COLON           reduce using rule 48 (atrib -> empty .)


state 65

    (68) nome -> DOT ID . nome
    (68) nome -> . DOT ID nome
    (69) nome -> . LSBRACKET parametro RSBRACKET
    (70) nome -> . LPAREN lista_param RPAREN
    (71) nome -> . empty
    (72) empty -> .

    DOT             shift and go to state 31
    LSBRACKET       shift and go to state 32
    LPAREN          shift and go to state 33
    ASSIGNMENT      reduce using rule 72 (empty -> .)
    SEMICOLON       reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    ELSE            reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)
    PLUS            reduce using rule 72 (empty -> .)
    MINUS           reduce using rule 72 (empty -> .)
    TIMES           reduce using rule 72 (empty -> .)
    DIVIDE          reduce using rule 72 (empty -> .)
    MORETHAN        reduce using rule 72 (empty -> .)
    LESSTHAN        reduce using rule 72 (empty -> .)
    EQUALS          reduce using rule 72 (empty -> .)
    NOT             reduce using rule 72 (empty -> .)
    ARROW           reduce using rule 72 (empty -> .)
    LESSOREQUAL     reduce using rule 72 (empty -> .)
    DO              reduce using rule 72 (empty -> .)
    THEN            reduce using rule 72 (empty -> .)
    RSBRACKET       reduce using rule 72 (empty -> .)
    COMMA           reduce using rule 72 (empty -> .)
    RPAREN          reduce using rule 72 (empty -> .)

    nome                           shift and go to state 106
    empty                          shift and go to state 34

state 66

    (69) nome -> LSBRACKET parametro . RSBRACKET

    RSBRACKET       shift and go to state 107


state 67

    (70) nome -> LPAREN lista_param . RPAREN

    RPAREN          shift and go to state 108


state 68

    (49) lista_param -> parametro . COMMA lista_param
    (50) lista_param -> parametro .

    COMMA           shift and go to state 109
    RPAREN          reduce using rule 50 (lista_param -> parametro .)


state 69

    (51) lista_param -> empty .

    RPAREN          reduce using rule 51 (lista_param -> empty .)


state 70

    (40) comando -> WHILE exp_logica DO . bloco
    (35) bloco -> . BEGIN comando SEMICOLON lista_com END
    (36) bloco -> . COLON comando

    BEGIN           shift and go to state 7
    COLON           shift and go to state 8

    bloco                          shift and go to state 110

state 71

    (58) exp_logica -> exp_mat op_logico . exp_logica
    (58) exp_logica -> . exp_mat op_logico exp_logica
    (59) exp_logica -> . exp_mat
    (60) exp_mat -> . parametro op_mat exp_mat
    (61) exp_mat -> . parametro
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    exp_mat                        shift and go to state 36
    exp_logica                     shift and go to state 111
    parametro                      shift and go to state 37

state 72

    (52) op_logico -> MORETHAN .

    ID              reduce using rule 52 (op_logico -> MORETHAN .)
    NUMBER          reduce using rule 52 (op_logico -> MORETHAN .)


state 73

    (53) op_logico -> LESSTHAN .

    ID              reduce using rule 53 (op_logico -> LESSTHAN .)
    NUMBER          reduce using rule 53 (op_logico -> LESSTHAN .)


state 74

    (54) op_logico -> EQUALS .

    ID              reduce using rule 54 (op_logico -> EQUALS .)
    NUMBER          reduce using rule 54 (op_logico -> EQUALS .)


state 75

    (55) op_logico -> NOT .

    ID              reduce using rule 55 (op_logico -> NOT .)
    NUMBER          reduce using rule 55 (op_logico -> NOT .)


state 76

    (56) op_logico -> ARROW .

    ID              reduce using rule 56 (op_logico -> ARROW .)
    NUMBER          reduce using rule 56 (op_logico -> ARROW .)


state 77

    (57) op_logico -> LESSOREQUAL .

    ID              reduce using rule 57 (op_logico -> LESSOREQUAL .)
    NUMBER          reduce using rule 57 (op_logico -> LESSOREQUAL .)


state 78

    (60) exp_mat -> parametro op_mat . exp_mat
    (60) exp_mat -> . parametro op_mat exp_mat
    (61) exp_mat -> . parametro
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER

    ID              shift and go to state 38
    NUMBER          shift and go to state 39

    parametro                      shift and go to state 37
    exp_mat                        shift and go to state 112

state 79

    (62) op_mat -> PLUS .

    ID              reduce using rule 62 (op_mat -> PLUS .)
    NUMBER          reduce using rule 62 (op_mat -> PLUS .)


state 80

    (63) op_mat -> MINUS .

    ID              reduce using rule 63 (op_mat -> MINUS .)
    NUMBER          reduce using rule 63 (op_mat -> MINUS .)


state 81

    (64) op_mat -> TIMES .

    ID              reduce using rule 64 (op_mat -> TIMES .)
    NUMBER          reduce using rule 64 (op_mat -> TIMES .)


state 82

    (65) op_mat -> DIVIDE .

    ID              reduce using rule 65 (op_mat -> DIVIDE .)
    NUMBER          reduce using rule 65 (op_mat -> DIVIDE .)


state 83

    (66) parametro -> ID nome .

    PLUS            reduce using rule 66 (parametro -> ID nome .)
    MINUS           reduce using rule 66 (parametro -> ID nome .)
    TIMES           reduce using rule 66 (parametro -> ID nome .)
    DIVIDE          reduce using rule 66 (parametro -> ID nome .)
    MORETHAN        reduce using rule 66 (parametro -> ID nome .)
    LESSTHAN        reduce using rule 66 (parametro -> ID nome .)
    EQUALS          reduce using rule 66 (parametro -> ID nome .)
    NOT             reduce using rule 66 (parametro -> ID nome .)
    ARROW           reduce using rule 66 (parametro -> ID nome .)
    LESSOREQUAL     reduce using rule 66 (parametro -> ID nome .)
    DO              reduce using rule 66 (parametro -> ID nome .)
    THEN            reduce using rule 66 (parametro -> ID nome .)
    SEMICOLON       reduce using rule 66 (parametro -> ID nome .)
    $end            reduce using rule 66 (parametro -> ID nome .)
    ELSE            reduce using rule 66 (parametro -> ID nome .)
    FUNCTION        reduce using rule 66 (parametro -> ID nome .)
    PROCEDURE       reduce using rule 66 (parametro -> ID nome .)
    BEGIN           reduce using rule 66 (parametro -> ID nome .)
    COLON           reduce using rule 66 (parametro -> ID nome .)
    RSBRACKET       reduce using rule 66 (parametro -> ID nome .)
    COMMA           reduce using rule 66 (parametro -> ID nome .)
    RPAREN          reduce using rule 66 (parametro -> ID nome .)


state 84

    (41) comando -> IF exp_logica THEN . bloco else
    (35) bloco -> . BEGIN comando SEMICOLON lista_com END
    (36) bloco -> . COLON comando

    BEGIN           shift and go to state 7
    COLON           shift and go to state 8

    bloco                          shift and go to state 113

state 85

    (44) comando -> READ ID nome .

    SEMICOLON       reduce using rule 44 (comando -> READ ID nome .)
    $end            reduce using rule 44 (comando -> READ ID nome .)
    ELSE            reduce using rule 44 (comando -> READ ID nome .)
    FUNCTION        reduce using rule 44 (comando -> READ ID nome .)
    PROCEDURE       reduce using rule 44 (comando -> READ ID nome .)
    BEGIN           reduce using rule 44 (comando -> READ ID nome .)
    COLON           reduce using rule 44 (comando -> READ ID nome .)


state 86

    (29) def_rot -> nome_rotina def_var . bloco def_rot
    (35) bloco -> . BEGIN comando SEMICOLON lista_com END
    (36) bloco -> . COLON comando

    BEGIN           shift and go to state 7
    COLON           shift and go to state 8

    bloco                          shift and go to state 114

state 87

    (31) nome_rotina -> FUNCTION ID . param_rot COLON tipo_dado
    (33) param_rot -> . LPAREN campos RPAREN
    (34) param_rot -> . empty
    (72) empty -> .

    LPAREN          shift and go to state 116
    COLON           reduce using rule 72 (empty -> .)

    param_rot                      shift and go to state 115
    empty                          shift and go to state 117

state 88

    (32) nome_rotina -> PROCEDURE ID . param_rot
    (33) param_rot -> . LPAREN campos RPAREN
    (34) param_rot -> . empty
    (72) empty -> .

    LPAREN          shift and go to state 116
    VAR             reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    param_rot                      shift and go to state 118
    empty                          shift and go to state 117

state 89

    (22) def_var -> VAR variavel SEMICOLON . list_var
    (24) list_var -> . variavel SEMICOLON list_var
    (25) list_var -> . empty
    (26) variavel -> . ID lista_id COLON tipo_dado
    (72) empty -> .

    ID              shift and go to state 50
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    variavel                       shift and go to state 119
    list_var                       shift and go to state 120
    empty                          shift and go to state 121

state 90

    (26) variavel -> ID lista_id . COLON tipo_dado

    COLON           shift and go to state 122


state 91

    (27) lista_id -> COMMA . ID lista_id

    ID              shift and go to state 123


state 92

    (28) lista_id -> empty .

    COLON           reduce using rule 28 (lista_id -> empty .)


state 93

    (12) list_tipos -> tipo . SEMICOLON list_tipos

    SEMICOLON       shift and go to state 124


state 94

    (10) def_tipos -> TYPE tipo SEMICOLON list_tipos .

    VAR             reduce using rule 10 (def_tipos -> TYPE tipo SEMICOLON list_tipos .)
    FUNCTION        reduce using rule 10 (def_tipos -> TYPE tipo SEMICOLON list_tipos .)
    PROCEDURE       reduce using rule 10 (def_tipos -> TYPE tipo SEMICOLON list_tipos .)
    BEGIN           reduce using rule 10 (def_tipos -> TYPE tipo SEMICOLON list_tipos .)
    COLON           reduce using rule 10 (def_tipos -> TYPE tipo SEMICOLON list_tipos .)


state 95

    (13) list_tipos -> empty .

    VAR             reduce using rule 13 (list_tipos -> empty .)
    FUNCTION        reduce using rule 13 (list_tipos -> empty .)
    PROCEDURE       reduce using rule 13 (list_tipos -> empty .)
    BEGIN           reduce using rule 13 (list_tipos -> empty .)
    COLON           reduce using rule 13 (list_tipos -> empty .)


state 96

    (19) tipo_dado -> ID .

    SEMICOLON       reduce using rule 19 (tipo_dado -> ID .)
    VAR             reduce using rule 19 (tipo_dado -> ID .)
    BEGIN           reduce using rule 19 (tipo_dado -> ID .)
    COLON           reduce using rule 19 (tipo_dado -> ID .)
    END             reduce using rule 19 (tipo_dado -> ID .)
    RPAREN          reduce using rule 19 (tipo_dado -> ID .)


state 97

    (14) tipo -> ID DOUBLEEQUALS tipo_dado .

    SEMICOLON       reduce using rule 14 (tipo -> ID DOUBLEEQUALS tipo_dado .)


state 98

    (15) tipo_dado -> INTEGER .

    SEMICOLON       reduce using rule 15 (tipo_dado -> INTEGER .)
    VAR             reduce using rule 15 (tipo_dado -> INTEGER .)
    BEGIN           reduce using rule 15 (tipo_dado -> INTEGER .)
    COLON           reduce using rule 15 (tipo_dado -> INTEGER .)
    END             reduce using rule 15 (tipo_dado -> INTEGER .)
    RPAREN          reduce using rule 15 (tipo_dado -> INTEGER .)


state 99

    (16) tipo_dado -> REAL .

    SEMICOLON       reduce using rule 16 (tipo_dado -> REAL .)
    VAR             reduce using rule 16 (tipo_dado -> REAL .)
    BEGIN           reduce using rule 16 (tipo_dado -> REAL .)
    COLON           reduce using rule 16 (tipo_dado -> REAL .)
    END             reduce using rule 16 (tipo_dado -> REAL .)
    RPAREN          reduce using rule 16 (tipo_dado -> REAL .)


state 100

    (17) tipo_dado -> ARRAY . LSBRACKET NUMBER RSBRACKET OF tipo_dado

    LSBRACKET       shift and go to state 125


state 101

    (18) tipo_dado -> RECORD . campos END
    (20) campos -> . ID COLON tipo_dado
    (21) campos -> . ID COLON tipo_dado SEMICOLON campos

    ID              shift and go to state 127

    campos                         shift and go to state 126

state 102

    (5) list_const -> constante SEMICOLON . list_const
    (5) list_const -> . constante SEMICOLON list_const
    (6) list_const -> . empty
    (7) constante -> . ID DOUBLEEQUALS const_valor
    (72) empty -> .

    ID              shift and go to state 13
    TYPE            reduce using rule 72 (empty -> .)
    VAR             reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    constante                      shift and go to state 53
    list_const                     shift and go to state 128
    empty                          shift and go to state 55

state 103

    (37) lista_com -> comando SEMICOLON . lista_com
    (37) lista_com -> . comando SEMICOLON lista_com
    (38) lista_com -> . empty
    (39) comando -> . ID nome atrib
    (40) comando -> . WHILE exp_logica DO bloco
    (41) comando -> . IF exp_logica THEN bloco else
    (42) comando -> . RETURN exp_logica
    (43) comando -> . WRITE exp_mat
    (44) comando -> . READ ID nome
    (72) empty -> .

    ID              shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    RETURN          shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20
    END             reduce using rule 72 (empty -> .)

    comando                        shift and go to state 59
    lista_com                      shift and go to state 129
    empty                          shift and go to state 61

state 104

    (35) bloco -> BEGIN comando SEMICOLON lista_com END .

    $end            reduce using rule 35 (bloco -> BEGIN comando SEMICOLON lista_com END .)
    SEMICOLON       reduce using rule 35 (bloco -> BEGIN comando SEMICOLON lista_com END .)
    ELSE            reduce using rule 35 (bloco -> BEGIN comando SEMICOLON lista_com END .)
    FUNCTION        reduce using rule 35 (bloco -> BEGIN comando SEMICOLON lista_com END .)
    PROCEDURE       reduce using rule 35 (bloco -> BEGIN comando SEMICOLON lista_com END .)
    BEGIN           reduce using rule 35 (bloco -> BEGIN comando SEMICOLON lista_com END .)
    COLON           reduce using rule 35 (bloco -> BEGIN comando SEMICOLON lista_com END .)


state 105

    (47) atrib -> ASSIGNMENT exp_mat .

    SEMICOLON       reduce using rule 47 (atrib -> ASSIGNMENT exp_mat .)
    $end            reduce using rule 47 (atrib -> ASSIGNMENT exp_mat .)
    ELSE            reduce using rule 47 (atrib -> ASSIGNMENT exp_mat .)
    FUNCTION        reduce using rule 47 (atrib -> ASSIGNMENT exp_mat .)
    PROCEDURE       reduce using rule 47 (atrib -> ASSIGNMENT exp_mat .)
    BEGIN           reduce using rule 47 (atrib -> ASSIGNMENT exp_mat .)
    COLON           reduce using rule 47 (atrib -> ASSIGNMENT exp_mat .)


state 106

    (68) nome -> DOT ID nome .

    ASSIGNMENT      reduce using rule 68 (nome -> DOT ID nome .)
    SEMICOLON       reduce using rule 68 (nome -> DOT ID nome .)
    $end            reduce using rule 68 (nome -> DOT ID nome .)
    ELSE            reduce using rule 68 (nome -> DOT ID nome .)
    FUNCTION        reduce using rule 68 (nome -> DOT ID nome .)
    PROCEDURE       reduce using rule 68 (nome -> DOT ID nome .)
    BEGIN           reduce using rule 68 (nome -> DOT ID nome .)
    COLON           reduce using rule 68 (nome -> DOT ID nome .)
    PLUS            reduce using rule 68 (nome -> DOT ID nome .)
    MINUS           reduce using rule 68 (nome -> DOT ID nome .)
    TIMES           reduce using rule 68 (nome -> DOT ID nome .)
    DIVIDE          reduce using rule 68 (nome -> DOT ID nome .)
    MORETHAN        reduce using rule 68 (nome -> DOT ID nome .)
    LESSTHAN        reduce using rule 68 (nome -> DOT ID nome .)
    EQUALS          reduce using rule 68 (nome -> DOT ID nome .)
    NOT             reduce using rule 68 (nome -> DOT ID nome .)
    ARROW           reduce using rule 68 (nome -> DOT ID nome .)
    LESSOREQUAL     reduce using rule 68 (nome -> DOT ID nome .)
    DO              reduce using rule 68 (nome -> DOT ID nome .)
    THEN            reduce using rule 68 (nome -> DOT ID nome .)
    RSBRACKET       reduce using rule 68 (nome -> DOT ID nome .)
    COMMA           reduce using rule 68 (nome -> DOT ID nome .)
    RPAREN          reduce using rule 68 (nome -> DOT ID nome .)


state 107

    (69) nome -> LSBRACKET parametro RSBRACKET .

    ASSIGNMENT      reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    SEMICOLON       reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    $end            reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    ELSE            reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    FUNCTION        reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    PROCEDURE       reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    BEGIN           reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    COLON           reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    PLUS            reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    MINUS           reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    TIMES           reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    DIVIDE          reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    MORETHAN        reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    LESSTHAN        reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    EQUALS          reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    NOT             reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    ARROW           reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    LESSOREQUAL     reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    DO              reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    THEN            reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    RSBRACKET       reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    COMMA           reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)
    RPAREN          reduce using rule 69 (nome -> LSBRACKET parametro RSBRACKET .)


state 108

    (70) nome -> LPAREN lista_param RPAREN .

    ASSIGNMENT      reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    SEMICOLON       reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    $end            reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    ELSE            reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    FUNCTION        reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    PROCEDURE       reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    BEGIN           reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    COLON           reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    PLUS            reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    MINUS           reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    TIMES           reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    DIVIDE          reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    MORETHAN        reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    LESSTHAN        reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    EQUALS          reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    NOT             reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    ARROW           reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    LESSOREQUAL     reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    DO              reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    THEN            reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    RSBRACKET       reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    COMMA           reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)
    RPAREN          reduce using rule 70 (nome -> LPAREN lista_param RPAREN .)


state 109

    (49) lista_param -> parametro COMMA . lista_param
    (49) lista_param -> . parametro COMMA lista_param
    (50) lista_param -> . parametro
    (51) lista_param -> . empty
    (66) parametro -> . ID nome
    (67) parametro -> . NUMBER
    (72) empty -> .

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    RPAREN          reduce using rule 72 (empty -> .)

    parametro                      shift and go to state 68
    lista_param                    shift and go to state 130
    empty                          shift and go to state 69

state 110

    (40) comando -> WHILE exp_logica DO bloco .

    SEMICOLON       reduce using rule 40 (comando -> WHILE exp_logica DO bloco .)
    $end            reduce using rule 40 (comando -> WHILE exp_logica DO bloco .)
    ELSE            reduce using rule 40 (comando -> WHILE exp_logica DO bloco .)
    FUNCTION        reduce using rule 40 (comando -> WHILE exp_logica DO bloco .)
    PROCEDURE       reduce using rule 40 (comando -> WHILE exp_logica DO bloco .)
    BEGIN           reduce using rule 40 (comando -> WHILE exp_logica DO bloco .)
    COLON           reduce using rule 40 (comando -> WHILE exp_logica DO bloco .)


state 111

    (58) exp_logica -> exp_mat op_logico exp_logica .

    DO              reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)
    THEN            reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)
    SEMICOLON       reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)
    $end            reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)
    ELSE            reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)
    FUNCTION        reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)
    PROCEDURE       reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)
    BEGIN           reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)
    COLON           reduce using rule 58 (exp_logica -> exp_mat op_logico exp_logica .)


state 112

    (60) exp_mat -> parametro op_mat exp_mat .

    MORETHAN        reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    LESSTHAN        reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    EQUALS          reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    NOT             reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    ARROW           reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    LESSOREQUAL     reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    DO              reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    THEN            reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    SEMICOLON       reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    $end            reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    ELSE            reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    FUNCTION        reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    PROCEDURE       reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    BEGIN           reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)
    COLON           reduce using rule 60 (exp_mat -> parametro op_mat exp_mat .)


state 113

    (41) comando -> IF exp_logica THEN bloco . else
    (45) else -> . ELSE bloco
    (46) else -> . empty
    (72) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 132
    $end            reduce using rule 72 (empty -> .)
    SEMICOLON       reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

  ! ELSE            [ reduce using rule 72 (empty -> .) ]

    else                           shift and go to state 131
    empty                          shift and go to state 133

state 114

    (29) def_rot -> nome_rotina def_var bloco . def_rot
    (29) def_rot -> . nome_rotina def_var bloco def_rot
    (30) def_rot -> . empty
    (31) nome_rotina -> . FUNCTION ID param_rot COLON tipo_dado
    (32) nome_rotina -> . PROCEDURE ID param_rot
    (72) empty -> .

    FUNCTION        shift and go to state 47
    PROCEDURE       shift and go to state 48
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    nome_rotina                    shift and go to state 45
    def_rot                        shift and go to state 134
    empty                          shift and go to state 46

state 115

    (31) nome_rotina -> FUNCTION ID param_rot . COLON tipo_dado

    COLON           shift and go to state 135


state 116

    (33) param_rot -> LPAREN . campos RPAREN
    (20) campos -> . ID COLON tipo_dado
    (21) campos -> . ID COLON tipo_dado SEMICOLON campos

    ID              shift and go to state 127

    campos                         shift and go to state 136

state 117

    (34) param_rot -> empty .

    COLON           reduce using rule 34 (param_rot -> empty .)
    VAR             reduce using rule 34 (param_rot -> empty .)
    BEGIN           reduce using rule 34 (param_rot -> empty .)


state 118

    (32) nome_rotina -> PROCEDURE ID param_rot .

    VAR             reduce using rule 32 (nome_rotina -> PROCEDURE ID param_rot .)
    BEGIN           reduce using rule 32 (nome_rotina -> PROCEDURE ID param_rot .)
    COLON           reduce using rule 32 (nome_rotina -> PROCEDURE ID param_rot .)


state 119

    (24) list_var -> variavel . SEMICOLON list_var

    SEMICOLON       shift and go to state 137


state 120

    (22) def_var -> VAR variavel SEMICOLON list_var .

    FUNCTION        reduce using rule 22 (def_var -> VAR variavel SEMICOLON list_var .)
    PROCEDURE       reduce using rule 22 (def_var -> VAR variavel SEMICOLON list_var .)
    BEGIN           reduce using rule 22 (def_var -> VAR variavel SEMICOLON list_var .)
    COLON           reduce using rule 22 (def_var -> VAR variavel SEMICOLON list_var .)


state 121

    (25) list_var -> empty .

    FUNCTION        reduce using rule 25 (list_var -> empty .)
    PROCEDURE       reduce using rule 25 (list_var -> empty .)
    BEGIN           reduce using rule 25 (list_var -> empty .)
    COLON           reduce using rule 25 (list_var -> empty .)


state 122

    (26) variavel -> ID lista_id COLON . tipo_dado
    (15) tipo_dado -> . INTEGER
    (16) tipo_dado -> . REAL
    (17) tipo_dado -> . ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado
    (18) tipo_dado -> . RECORD campos END
    (19) tipo_dado -> . ID

    INTEGER         shift and go to state 98
    REAL            shift and go to state 99
    ARRAY           shift and go to state 100
    RECORD          shift and go to state 101
    ID              shift and go to state 96

    tipo_dado                      shift and go to state 138

state 123

    (27) lista_id -> COMMA ID . lista_id
    (27) lista_id -> . COMMA ID lista_id
    (28) lista_id -> . empty
    (72) empty -> .

    COMMA           shift and go to state 91
    COLON           reduce using rule 72 (empty -> .)

    lista_id                       shift and go to state 139
    empty                          shift and go to state 92

state 124

    (12) list_tipos -> tipo SEMICOLON . list_tipos
    (12) list_tipos -> . tipo SEMICOLON list_tipos
    (13) list_tipos -> . empty
    (14) tipo -> . ID DOUBLEEQUALS tipo_dado
    (72) empty -> .

    ID              shift and go to state 26
    VAR             reduce using rule 72 (empty -> .)
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    tipo                           shift and go to state 93
    list_tipos                     shift and go to state 140
    empty                          shift and go to state 95

state 125

    (17) tipo_dado -> ARRAY LSBRACKET . NUMBER RSBRACKET OF tipo_dado

    NUMBER          shift and go to state 141


state 126

    (18) tipo_dado -> RECORD campos . END

    END             shift and go to state 142


state 127

    (20) campos -> ID . COLON tipo_dado
    (21) campos -> ID . COLON tipo_dado SEMICOLON campos

    COLON           shift and go to state 143


state 128

    (5) list_const -> constante SEMICOLON list_const .

    TYPE            reduce using rule 5 (list_const -> constante SEMICOLON list_const .)
    VAR             reduce using rule 5 (list_const -> constante SEMICOLON list_const .)
    FUNCTION        reduce using rule 5 (list_const -> constante SEMICOLON list_const .)
    PROCEDURE       reduce using rule 5 (list_const -> constante SEMICOLON list_const .)
    BEGIN           reduce using rule 5 (list_const -> constante SEMICOLON list_const .)
    COLON           reduce using rule 5 (list_const -> constante SEMICOLON list_const .)


state 129

    (37) lista_com -> comando SEMICOLON lista_com .

    END             reduce using rule 37 (lista_com -> comando SEMICOLON lista_com .)


state 130

    (49) lista_param -> parametro COMMA lista_param .

    RPAREN          reduce using rule 49 (lista_param -> parametro COMMA lista_param .)


state 131

    (41) comando -> IF exp_logica THEN bloco else .

    SEMICOLON       reduce using rule 41 (comando -> IF exp_logica THEN bloco else .)
    $end            reduce using rule 41 (comando -> IF exp_logica THEN bloco else .)
    ELSE            reduce using rule 41 (comando -> IF exp_logica THEN bloco else .)
    FUNCTION        reduce using rule 41 (comando -> IF exp_logica THEN bloco else .)
    PROCEDURE       reduce using rule 41 (comando -> IF exp_logica THEN bloco else .)
    BEGIN           reduce using rule 41 (comando -> IF exp_logica THEN bloco else .)
    COLON           reduce using rule 41 (comando -> IF exp_logica THEN bloco else .)


state 132

    (45) else -> ELSE . bloco
    (35) bloco -> . BEGIN comando SEMICOLON lista_com END
    (36) bloco -> . COLON comando

    BEGIN           shift and go to state 7
    COLON           shift and go to state 8

    bloco                          shift and go to state 144

state 133

    (46) else -> empty .

    $end            reduce using rule 46 (else -> empty .)
    SEMICOLON       reduce using rule 46 (else -> empty .)
    ELSE            reduce using rule 46 (else -> empty .)
    FUNCTION        reduce using rule 46 (else -> empty .)
    PROCEDURE       reduce using rule 46 (else -> empty .)
    BEGIN           reduce using rule 46 (else -> empty .)
    COLON           reduce using rule 46 (else -> empty .)


state 134

    (29) def_rot -> nome_rotina def_var bloco def_rot .

    BEGIN           reduce using rule 29 (def_rot -> nome_rotina def_var bloco def_rot .)
    COLON           reduce using rule 29 (def_rot -> nome_rotina def_var bloco def_rot .)


state 135

    (31) nome_rotina -> FUNCTION ID param_rot COLON . tipo_dado
    (15) tipo_dado -> . INTEGER
    (16) tipo_dado -> . REAL
    (17) tipo_dado -> . ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado
    (18) tipo_dado -> . RECORD campos END
    (19) tipo_dado -> . ID

    INTEGER         shift and go to state 98
    REAL            shift and go to state 99
    ARRAY           shift and go to state 100
    RECORD          shift and go to state 101
    ID              shift and go to state 96

    tipo_dado                      shift and go to state 145

state 136

    (33) param_rot -> LPAREN campos . RPAREN

    RPAREN          shift and go to state 146


state 137

    (24) list_var -> variavel SEMICOLON . list_var
    (24) list_var -> . variavel SEMICOLON list_var
    (25) list_var -> . empty
    (26) variavel -> . ID lista_id COLON tipo_dado
    (72) empty -> .

    ID              shift and go to state 50
    FUNCTION        reduce using rule 72 (empty -> .)
    PROCEDURE       reduce using rule 72 (empty -> .)
    BEGIN           reduce using rule 72 (empty -> .)
    COLON           reduce using rule 72 (empty -> .)

    variavel                       shift and go to state 119
    list_var                       shift and go to state 147
    empty                          shift and go to state 121

state 138

    (26) variavel -> ID lista_id COLON tipo_dado .

    SEMICOLON       reduce using rule 26 (variavel -> ID lista_id COLON tipo_dado .)


state 139

    (27) lista_id -> COMMA ID lista_id .

    COLON           reduce using rule 27 (lista_id -> COMMA ID lista_id .)


state 140

    (12) list_tipos -> tipo SEMICOLON list_tipos .

    VAR             reduce using rule 12 (list_tipos -> tipo SEMICOLON list_tipos .)
    FUNCTION        reduce using rule 12 (list_tipos -> tipo SEMICOLON list_tipos .)
    PROCEDURE       reduce using rule 12 (list_tipos -> tipo SEMICOLON list_tipos .)
    BEGIN           reduce using rule 12 (list_tipos -> tipo SEMICOLON list_tipos .)
    COLON           reduce using rule 12 (list_tipos -> tipo SEMICOLON list_tipos .)


state 141

    (17) tipo_dado -> ARRAY LSBRACKET NUMBER . RSBRACKET OF tipo_dado

    RSBRACKET       shift and go to state 148


state 142

    (18) tipo_dado -> RECORD campos END .

    SEMICOLON       reduce using rule 18 (tipo_dado -> RECORD campos END .)
    VAR             reduce using rule 18 (tipo_dado -> RECORD campos END .)
    BEGIN           reduce using rule 18 (tipo_dado -> RECORD campos END .)
    COLON           reduce using rule 18 (tipo_dado -> RECORD campos END .)
    END             reduce using rule 18 (tipo_dado -> RECORD campos END .)
    RPAREN          reduce using rule 18 (tipo_dado -> RECORD campos END .)


state 143

    (20) campos -> ID COLON . tipo_dado
    (21) campos -> ID COLON . tipo_dado SEMICOLON campos
    (15) tipo_dado -> . INTEGER
    (16) tipo_dado -> . REAL
    (17) tipo_dado -> . ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado
    (18) tipo_dado -> . RECORD campos END
    (19) tipo_dado -> . ID

    INTEGER         shift and go to state 98
    REAL            shift and go to state 99
    ARRAY           shift and go to state 100
    RECORD          shift and go to state 101
    ID              shift and go to state 96

    tipo_dado                      shift and go to state 149

state 144

    (45) else -> ELSE bloco .

    $end            reduce using rule 45 (else -> ELSE bloco .)
    SEMICOLON       reduce using rule 45 (else -> ELSE bloco .)
    ELSE            reduce using rule 45 (else -> ELSE bloco .)
    FUNCTION        reduce using rule 45 (else -> ELSE bloco .)
    PROCEDURE       reduce using rule 45 (else -> ELSE bloco .)
    BEGIN           reduce using rule 45 (else -> ELSE bloco .)
    COLON           reduce using rule 45 (else -> ELSE bloco .)


state 145

    (31) nome_rotina -> FUNCTION ID param_rot COLON tipo_dado .

    VAR             reduce using rule 31 (nome_rotina -> FUNCTION ID param_rot COLON tipo_dado .)
    BEGIN           reduce using rule 31 (nome_rotina -> FUNCTION ID param_rot COLON tipo_dado .)
    COLON           reduce using rule 31 (nome_rotina -> FUNCTION ID param_rot COLON tipo_dado .)


state 146

    (33) param_rot -> LPAREN campos RPAREN .

    COLON           reduce using rule 33 (param_rot -> LPAREN campos RPAREN .)
    VAR             reduce using rule 33 (param_rot -> LPAREN campos RPAREN .)
    BEGIN           reduce using rule 33 (param_rot -> LPAREN campos RPAREN .)


state 147

    (24) list_var -> variavel SEMICOLON list_var .

    FUNCTION        reduce using rule 24 (list_var -> variavel SEMICOLON list_var .)
    PROCEDURE       reduce using rule 24 (list_var -> variavel SEMICOLON list_var .)
    BEGIN           reduce using rule 24 (list_var -> variavel SEMICOLON list_var .)
    COLON           reduce using rule 24 (list_var -> variavel SEMICOLON list_var .)


state 148

    (17) tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET . OF tipo_dado

    OF              shift and go to state 150


state 149

    (20) campos -> ID COLON tipo_dado .
    (21) campos -> ID COLON tipo_dado . SEMICOLON campos

    END             reduce using rule 20 (campos -> ID COLON tipo_dado .)
    RPAREN          reduce using rule 20 (campos -> ID COLON tipo_dado .)
    SEMICOLON       shift and go to state 151


state 150

    (17) tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF . tipo_dado
    (15) tipo_dado -> . INTEGER
    (16) tipo_dado -> . REAL
    (17) tipo_dado -> . ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado
    (18) tipo_dado -> . RECORD campos END
    (19) tipo_dado -> . ID

    INTEGER         shift and go to state 98
    REAL            shift and go to state 99
    ARRAY           shift and go to state 100
    RECORD          shift and go to state 101
    ID              shift and go to state 96

    tipo_dado                      shift and go to state 152

state 151

    (21) campos -> ID COLON tipo_dado SEMICOLON . campos
    (20) campos -> . ID COLON tipo_dado
    (21) campos -> . ID COLON tipo_dado SEMICOLON campos

    ID              shift and go to state 127

    campos                         shift and go to state 153

state 152

    (17) tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado .

    SEMICOLON       reduce using rule 17 (tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado .)
    VAR             reduce using rule 17 (tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado .)
    BEGIN           reduce using rule 17 (tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado .)
    COLON           reduce using rule 17 (tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado .)
    END             reduce using rule 17 (tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado .)
    RPAREN          reduce using rule 17 (tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado .)


state 153

    (21) campos -> ID COLON tipo_dado SEMICOLON campos .

    END             reduce using rule 21 (campos -> ID COLON tipo_dado SEMICOLON campos .)
    RPAREN          reduce using rule 21 (campos -> ID COLON tipo_dado SEMICOLON campos .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 113 resolved as shift
