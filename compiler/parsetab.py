
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESSOREQUALLESSTHANEQUALSDOUBLEEQUALSARROWMORETHANleftPLUSMINUSleftTIMESDIVIDEARRAY ARROW ASSIGNMENT BEGIN COLON COMMA CONST DIVIDE DO DOT DOUBLEEQUALS ELSE END EQUALS FALSE FUNCTION ID IF INTEGER LESSOREQUAL LESSTHAN LPAREN LSBRACKET MINUS MORETHAN NOT NUMBER OF PLUS PROCEDURE READ REAL RECORD RETURN RPAREN RSBRACKET SEMICOLON STRING THEN TIMES TRUE TYPE VAR WHILE WHITE_SPACE WRITE\n        programa : declaracoes bloco\n        \n        declaracoes : def_const def_tipos def_var def_rot\n        \n        def_const : CONST constante SEMICOLON list_const\n                  | empty\n        \n        list_const : constante SEMICOLON list_const\n                   | empty\n        \n        constante : ID DOUBLEEQUALS const_valor\n        \n        const_valor : STRING\n                    | exp_mat\n        \n        def_tipos : TYPE tipo SEMICOLON list_tipos\n                  | empty\n        \n        list_tipos : tipo SEMICOLON list_tipos\n                   | empty\n        \n        tipo : ID DOUBLEEQUALS tipo_dado\n        \n        tipo_dado : INTEGER\n                  | REAL\n                  | ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado\n                  | RECORD campos END\n                  | ID\n        \n        campos : ID COLON tipo_dado\n               | ID COLON tipo_dado SEMICOLON campos\n        \n        def_var : VAR variavel SEMICOLON list_var\n                | empty\n        \n        list_var : variavel SEMICOLON list_var\n                 | empty\n        \n        variavel : ID lista_id COLON tipo_dado\n        \n        lista_id : COMMA ID lista_id\n                 | empty\n        \n        def_rot : nome_rotina def_var bloco def_rot\n                | empty\n        \n        nome_rotina : FUNCTION ID param_rot COLON tipo_dado\n                    | PROCEDURE ID param_rot\n        \n        param_rot : LPAREN campos RPAREN\n                  | empty\n        \n        bloco : BEGIN comando SEMICOLON lista_com END\n              | COLON comando\n        \n        lista_com : comando SEMICOLON lista_com\n                  | empty\n        \n        comando : ID nome atrib\n                | WHILE exp_logica DO bloco\n                | IF exp_logica THEN bloco else\n                | RETURN exp_logica\n                | WRITE exp_mat\n                | READ ID nome\n        \n        else : ELSE bloco\n             | empty\n        \n        atrib : ASSIGNMENT exp_mat\n              | empty\n        \n        lista_param : parametro COMMA lista_param\n                    | parametro\n                    | empty\n        \n        op_logico : MORETHAN\n                  | LESSTHAN\n                  | EQUALS\n                  | NOT\n                  | ARROW\n                  | LESSOREQUAL\n        \n        exp_logica : exp_mat op_logico exp_logica\n                   | exp_mat\n        \n        exp_mat : parametro op_mat exp_mat\n                | parametro\n        \n        op_mat : PLUS\n               | MINUS\n               | TIMES\n               | DIVIDE\n        \n        parametro : ID nome\n                  | NUMBER\n        \n        nome : DOT ID nome\n             | LSBRACKET parametro RSBRACKET\n             | LPAREN lista_param RPAREN\n             | empty\n        \n        empty :\n        '
    
_lr_action_items = {'CONST':([0,],[4,]),'TYPE':([0,3,5,27,54,55,102,128,],[-72,10,-4,-72,-3,-6,-72,-5,]),'VAR':([0,3,5,9,11,27,45,51,54,55,88,94,95,96,98,99,102,117,118,124,128,140,142,145,146,152,],[-72,-72,-4,23,-11,-72,23,-72,-3,-6,-72,-10,-13,-19,-15,-16,-72,-34,-32,-72,-5,-12,-18,-31,-33,-17,]),'FUNCTION':([0,3,5,9,11,15,21,22,24,27,30,34,36,37,38,39,41,42,43,51,54,55,62,64,65,83,85,89,94,95,102,104,105,106,107,108,110,111,112,113,114,120,121,124,128,131,133,137,140,144,147,],[-72,-72,-4,-72,-11,-72,-36,47,-23,-72,-72,-71,-59,-61,-72,-67,-42,-43,-72,-72,-3,-6,-39,-48,-72,-66,-44,-72,-10,-13,-72,-35,-47,-68,-69,-70,-40,-58,-60,-72,47,-22,-25,-72,-5,-41,-46,-72,-12,-45,-24,]),'PROCEDURE':([0,3,5,9,11,15,21,22,24,27,30,34,36,37,38,39,41,42,43,51,54,55,62,64,65,83,85,89,94,95,102,104,105,106,107,108,110,111,112,113,114,120,121,124,128,131,133,137,140,144,147,],[-72,-72,-4,-72,-11,-72,-36,48,-23,-72,-72,-71,-59,-61,-72,-67,-42,-43,-72,-72,-3,-6,-39,-48,-72,-66,-44,-72,-10,-13,-72,-35,-47,-68,-69,-70,-40,-58,-60,-72,48,-22,-25,-72,-5,-41,-46,-72,-12,-45,-24,]),'BEGIN':([0,2,3,5,9,11,15,21,22,24,27,30,34,36,37,38,39,41,42,43,44,45,46,51,54,55,62,64,65,70,83,84,85,86,88,89,94,95,96,98,99,102,104,105,106,107,108,110,111,112,113,114,117,118,120,121,124,128,131,132,133,134,137,140,142,144,145,146,147,152,],[-72,7,-72,-4,-72,-11,-72,-36,-72,-23,-72,-72,-71,-59,-61,-72,-67,-42,-43,-72,-2,-72,-30,-72,-3,-6,-39,-48,-72,7,-66,7,-44,7,-72,-72,-10,-13,-19,-15,-16,-72,-35,-47,-68,-69,-70,-40,-58,-60,-72,-72,-34,-32,-22,-25,-72,-5,-41,7,-46,-29,-72,-12,-18,-45,-31,-33,-24,-17,]),'COLON':([0,2,3,5,9,11,15,21,22,24,27,30,34,36,37,38,39,41,42,43,44,45,46,50,51,54,55,62,64,65,70,83,84,85,86,87,88,89,90,92,94,95,96,98,99,102,104,105,106,107,108,110,111,112,113,114,115,117,118,120,121,123,124,127,128,131,132,133,134,137,139,140,142,144,145,146,147,152,],[-72,8,-72,-4,-72,-11,-72,-36,-72,-23,-72,-72,-71,-59,-61,-72,-67,-42,-43,-72,-2,-72,-30,-72,-72,-3,-6,-39,-48,-72,8,-66,8,-44,8,-72,-72,-72,122,-28,-10,-13,-19,-15,-16,-72,-35,-47,-68,-69,-70,-40,-58,-60,-72,-72,135,-34,-32,-22,-25,-72,-72,143,-5,-41,8,-46,-29,-72,-27,-12,-18,-45,-31,-33,-24,-17,]),'$end':([1,6,15,21,30,34,36,37,38,39,41,42,43,62,64,65,83,85,104,105,106,107,108,110,111,112,113,131,133,144,],[0,-1,-72,-36,-72,-71,-59,-61,-72,-67,-42,-43,-72,-39,-48,-72,-66,-44,-35,-47,-68,-69,-70,-40,-58,-60,-72,-41,-46,-45,]),'ID':([4,7,8,10,16,17,18,19,20,23,27,28,29,31,32,33,47,48,51,52,63,71,72,73,74,75,76,77,78,79,80,81,82,89,91,101,102,103,109,116,122,124,135,137,143,150,151,],[13,15,15,26,38,38,38,38,43,50,13,38,15,65,38,38,87,88,26,96,38,38,-52,-53,-54,-55,-56,-57,38,-62,-63,-64,-65,50,123,127,13,15,38,127,96,26,96,50,96,96,127,]),'WHILE':([7,8,29,103,],[16,16,16,16,]),'IF':([7,8,29,103,],[17,17,17,17,]),'RETURN':([7,8,29,103,],[18,18,18,18,]),'WRITE':([7,8,29,103,],[19,19,19,19,]),'READ':([7,8,29,103,],[20,20,20,20,]),'SEMICOLON':([12,14,15,21,25,30,34,36,37,38,39,41,42,43,49,53,56,57,58,59,62,64,65,83,85,93,96,97,98,99,104,105,106,107,108,110,111,112,113,119,131,133,138,142,144,149,152,],[27,29,-72,-36,51,-72,-71,-59,-61,-72,-67,-42,-43,-72,89,102,-7,-8,-9,103,-39,-48,-72,-66,-44,124,-19,-14,-15,-16,-35,-47,-68,-69,-70,-40,-58,-60,-72,137,-41,-46,-26,-18,-45,151,-17,]),'DOUBLEEQUALS':([13,26,],[28,52,]),'DOT':([15,38,43,65,],[31,31,31,31,]),'LSBRACKET':([15,38,43,65,100,],[32,32,32,32,125,]),'LPAREN':([15,38,43,65,87,88,],[33,33,33,33,116,116,]),'ASSIGNMENT':([15,30,34,65,106,107,108,],[-72,63,-71,-72,-68,-69,-70,]),'ELSE':([15,21,30,34,36,37,38,39,41,42,43,62,64,65,83,85,104,105,106,107,108,110,111,112,113,131,133,144,],[-72,-36,-72,-71,-59,-61,-72,-67,-42,-43,-72,-39,-48,-72,-66,-44,-35,-47,-68,-69,-70,-40,-58,-60,132,-41,-46,-45,]),'NUMBER':([16,17,18,19,28,32,33,63,71,72,73,74,75,76,77,78,79,80,81,82,109,125,],[39,39,39,39,39,39,39,39,39,-52,-53,-54,-55,-56,-57,39,-62,-63,-64,-65,39,141,]),'STRING':([28,],[57,]),'END':([29,60,61,96,98,99,103,126,129,142,149,152,153,],[-72,104,-38,-19,-15,-16,-72,142,-37,-18,-20,-17,-21,]),'RPAREN':([33,34,38,39,65,67,68,69,83,96,98,99,106,107,108,109,130,136,142,149,152,153,],[-72,-71,-72,-67,-72,108,-50,-51,-66,-19,-15,-16,-68,-69,-70,-72,-49,146,-18,-20,-17,-21,]),'PLUS':([34,37,38,39,65,83,106,107,108,],[-71,79,-72,-67,-72,-66,-68,-69,-70,]),'MINUS':([34,37,38,39,65,83,106,107,108,],[-71,80,-72,-67,-72,-66,-68,-69,-70,]),'TIMES':([34,37,38,39,65,83,106,107,108,],[-71,81,-72,-67,-72,-66,-68,-69,-70,]),'DIVIDE':([34,37,38,39,65,83,106,107,108,],[-71,82,-72,-67,-72,-66,-68,-69,-70,]),'MORETHAN':([34,36,37,38,39,65,83,106,107,108,112,],[-71,72,-61,-72,-67,-72,-66,-68,-69,-70,-60,]),'LESSTHAN':([34,36,37,38,39,65,83,106,107,108,112,],[-71,73,-61,-72,-67,-72,-66,-68,-69,-70,-60,]),'EQUALS':([34,36,37,38,39,65,83,106,107,108,112,],[-71,74,-61,-72,-67,-72,-66,-68,-69,-70,-60,]),'NOT':([34,36,37,38,39,65,83,106,107,108,112,],[-71,75,-61,-72,-67,-72,-66,-68,-69,-70,-60,]),'ARROW':([34,36,37,38,39,65,83,106,107,108,112,],[-71,76,-61,-72,-67,-72,-66,-68,-69,-70,-60,]),'LESSOREQUAL':([34,36,37,38,39,65,83,106,107,108,112,],[-71,77,-61,-72,-67,-72,-66,-68,-69,-70,-60,]),'DO':([34,35,36,37,38,39,65,83,106,107,108,111,112,],[-71,70,-59,-61,-72,-67,-72,-66,-68,-69,-70,-58,-60,]),'THEN':([34,36,37,38,39,40,65,83,106,107,108,111,112,],[-71,-59,-61,-72,-67,84,-72,-66,-68,-69,-70,-58,-60,]),'RSBRACKET':([34,38,39,65,66,83,106,107,108,141,],[-71,-72,-67,-72,107,-66,-68,-69,-70,148,]),'COMMA':([34,38,39,50,65,68,83,106,107,108,123,],[-71,-72,-67,91,-72,109,-66,-68,-69,-70,91,]),'INTEGER':([52,122,135,143,150,],[98,98,98,98,98,]),'REAL':([52,122,135,143,150,],[99,99,99,99,99,]),'ARRAY':([52,122,135,143,150,],[100,100,100,100,100,]),'RECORD':([52,122,135,143,150,],[101,101,101,101,101,]),'OF':([148,],[150,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracoes':([0,],[2,]),'def_const':([0,],[3,]),'empty':([0,3,9,15,22,27,29,30,33,38,43,45,50,51,65,87,88,89,102,103,109,113,114,123,124,137,],[5,11,24,34,46,55,61,64,69,34,34,24,92,95,34,117,117,121,55,61,69,133,46,92,95,121,]),'bloco':([2,70,84,86,132,],[6,110,113,114,144,]),'def_tipos':([3,],[9,]),'constante':([4,27,102,],[12,53,53,]),'comando':([7,8,29,103,],[14,21,59,59,]),'def_var':([9,45,],[22,86,]),'tipo':([10,51,124,],[25,93,93,]),'nome':([15,38,43,65,],[30,83,85,106,]),'exp_logica':([16,17,18,71,],[35,40,41,111,]),'exp_mat':([16,17,18,19,28,63,71,78,],[36,36,36,42,58,105,36,112,]),'parametro':([16,17,18,19,28,32,33,63,71,78,109,],[37,37,37,37,37,66,68,37,37,37,68,]),'def_rot':([22,114,],[44,134,]),'nome_rotina':([22,114,],[45,45,]),'variavel':([23,89,137,],[49,119,119,]),'list_const':([27,102,],[54,128,]),'const_valor':([28,],[56,]),'lista_com':([29,103,],[60,129,]),'atrib':([30,],[62,]),'lista_param':([33,109,],[67,130,]),'op_logico':([36,],[71,]),'op_mat':([37,],[78,]),'lista_id':([50,123,],[90,139,]),'list_tipos':([51,124,],[94,140,]),'tipo_dado':([52,122,135,143,150,],[97,138,145,149,152,]),'param_rot':([87,88,],[115,118,]),'list_var':([89,137,],[120,147,]),'campos':([101,116,151,],[126,136,153,]),'else':([113,],[131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> declaracoes bloco','programa',2,'p_programa','syntactic_analyzer.py',18),
  ('declaracoes -> def_const def_tipos def_var def_rot','declaracoes',4,'p_declaracoes','syntactic_analyzer.py',25),
  ('def_const -> CONST constante SEMICOLON list_const','def_const',4,'p_def_const','syntactic_analyzer.py',32),
  ('def_const -> empty','def_const',1,'p_def_const','syntactic_analyzer.py',33),
  ('list_const -> constante SEMICOLON list_const','list_const',3,'p_list_const','syntactic_analyzer.py',42),
  ('list_const -> empty','list_const',1,'p_list_const','syntactic_analyzer.py',43),
  ('constante -> ID DOUBLEEQUALS const_valor','constante',3,'p_constante','syntactic_analyzer.py',52),
  ('const_valor -> STRING','const_valor',1,'p_const_valor','syntactic_analyzer.py',59),
  ('const_valor -> exp_mat','const_valor',1,'p_const_valor','syntactic_analyzer.py',60),
  ('def_tipos -> TYPE tipo SEMICOLON list_tipos','def_tipos',4,'p_def_tipos','syntactic_analyzer.py',67),
  ('def_tipos -> empty','def_tipos',1,'p_def_tipos','syntactic_analyzer.py',68),
  ('list_tipos -> tipo SEMICOLON list_tipos','list_tipos',3,'p_list_tipos','syntactic_analyzer.py',77),
  ('list_tipos -> empty','list_tipos',1,'p_list_tipos','syntactic_analyzer.py',78),
  ('tipo -> ID DOUBLEEQUALS tipo_dado','tipo',3,'p_tipo','syntactic_analyzer.py',87),
  ('tipo_dado -> INTEGER','tipo_dado',1,'p_tipo_dado','syntactic_analyzer.py',94),
  ('tipo_dado -> REAL','tipo_dado',1,'p_tipo_dado','syntactic_analyzer.py',95),
  ('tipo_dado -> ARRAY LSBRACKET NUMBER RSBRACKET OF tipo_dado','tipo_dado',6,'p_tipo_dado','syntactic_analyzer.py',96),
  ('tipo_dado -> RECORD campos END','tipo_dado',3,'p_tipo_dado','syntactic_analyzer.py',97),
  ('tipo_dado -> ID','tipo_dado',1,'p_tipo_dado','syntactic_analyzer.py',98),
  ('campos -> ID COLON tipo_dado','campos',3,'p_campos','syntactic_analyzer.py',110),
  ('campos -> ID COLON tipo_dado SEMICOLON campos','campos',5,'p_campos','syntactic_analyzer.py',111),
  ('def_var -> VAR variavel SEMICOLON list_var','def_var',4,'p_def_var','syntactic_analyzer.py',121),
  ('def_var -> empty','def_var',1,'p_def_var','syntactic_analyzer.py',122),
  ('list_var -> variavel SEMICOLON list_var','list_var',3,'p_list_var','syntactic_analyzer.py',131),
  ('list_var -> empty','list_var',1,'p_list_var','syntactic_analyzer.py',132),
  ('variavel -> ID lista_id COLON tipo_dado','variavel',4,'p_variavel','syntactic_analyzer.py',141),
  ('lista_id -> COMMA ID lista_id','lista_id',3,'p_lista_id','syntactic_analyzer.py',148),
  ('lista_id -> empty','lista_id',1,'p_lista_id','syntactic_analyzer.py',149),
  ('def_rot -> nome_rotina def_var bloco def_rot','def_rot',4,'p_def_rot','syntactic_analyzer.py',158),
  ('def_rot -> empty','def_rot',1,'p_def_rot','syntactic_analyzer.py',159),
  ('nome_rotina -> FUNCTION ID param_rot COLON tipo_dado','nome_rotina',5,'p_nome_rotina','syntactic_analyzer.py',168),
  ('nome_rotina -> PROCEDURE ID param_rot','nome_rotina',3,'p_nome_rotina','syntactic_analyzer.py',169),
  ('param_rot -> LPAREN campos RPAREN','param_rot',3,'p_param_rot','syntactic_analyzer.py',179),
  ('param_rot -> empty','param_rot',1,'p_param_rot','syntactic_analyzer.py',180),
  ('bloco -> BEGIN comando SEMICOLON lista_com END','bloco',5,'p_bloco','syntactic_analyzer.py',189),
  ('bloco -> COLON comando','bloco',2,'p_bloco','syntactic_analyzer.py',190),
  ('lista_com -> comando SEMICOLON lista_com','lista_com',3,'p_lista_com','syntactic_analyzer.py',200),
  ('lista_com -> empty','lista_com',1,'p_lista_com','syntactic_analyzer.py',201),
  ('comando -> ID nome atrib','comando',3,'p_comando','syntactic_analyzer.py',210),
  ('comando -> WHILE exp_logica DO bloco','comando',4,'p_comando','syntactic_analyzer.py',211),
  ('comando -> IF exp_logica THEN bloco else','comando',5,'p_comando','syntactic_analyzer.py',212),
  ('comando -> RETURN exp_logica','comando',2,'p_comando','syntactic_analyzer.py',213),
  ('comando -> WRITE exp_mat','comando',2,'p_comando','syntactic_analyzer.py',214),
  ('comando -> READ ID nome','comando',3,'p_comando','syntactic_analyzer.py',215),
  ('else -> ELSE bloco','else',2,'p_else','syntactic_analyzer.py',233),
  ('else -> empty','else',1,'p_else','syntactic_analyzer.py',234),
  ('atrib -> ASSIGNMENT exp_mat','atrib',2,'p_atrib','syntactic_analyzer.py',243),
  ('atrib -> empty','atrib',1,'p_atrib','syntactic_analyzer.py',244),
  ('lista_param -> parametro COMMA lista_param','lista_param',3,'p_lista_param','syntactic_analyzer.py',253),
  ('lista_param -> parametro','lista_param',1,'p_lista_param','syntactic_analyzer.py',254),
  ('lista_param -> empty','lista_param',1,'p_lista_param','syntactic_analyzer.py',255),
  ('op_logico -> MORETHAN','op_logico',1,'p_op_logico','syntactic_analyzer.py',266),
  ('op_logico -> LESSTHAN','op_logico',1,'p_op_logico','syntactic_analyzer.py',267),
  ('op_logico -> EQUALS','op_logico',1,'p_op_logico','syntactic_analyzer.py',268),
  ('op_logico -> NOT','op_logico',1,'p_op_logico','syntactic_analyzer.py',269),
  ('op_logico -> ARROW','op_logico',1,'p_op_logico','syntactic_analyzer.py',270),
  ('op_logico -> LESSOREQUAL','op_logico',1,'p_op_logico','syntactic_analyzer.py',271),
  ('exp_logica -> exp_mat op_logico exp_logica','exp_logica',3,'p_exp_logica','syntactic_analyzer.py',278),
  ('exp_logica -> exp_mat','exp_logica',1,'p_exp_logica','syntactic_analyzer.py',279),
  ('exp_mat -> parametro op_mat exp_mat','exp_mat',3,'p_exp_mat','syntactic_analyzer.py',288),
  ('exp_mat -> parametro','exp_mat',1,'p_exp_mat','syntactic_analyzer.py',289),
  ('op_mat -> PLUS','op_mat',1,'p_op_mat','syntactic_analyzer.py',299),
  ('op_mat -> MINUS','op_mat',1,'p_op_mat','syntactic_analyzer.py',300),
  ('op_mat -> TIMES','op_mat',1,'p_op_mat','syntactic_analyzer.py',301),
  ('op_mat -> DIVIDE','op_mat',1,'p_op_mat','syntactic_analyzer.py',302),
  ('parametro -> ID nome','parametro',2,'p_parametro','syntactic_analyzer.py',309),
  ('parametro -> NUMBER','parametro',1,'p_parametro','syntactic_analyzer.py',310),
  ('nome -> DOT ID nome','nome',3,'p_nome','syntactic_analyzer.py',320),
  ('nome -> LSBRACKET parametro RSBRACKET','nome',3,'p_nome','syntactic_analyzer.py',321),
  ('nome -> LPAREN lista_param RPAREN','nome',3,'p_nome','syntactic_analyzer.py',322),
  ('nome -> empty','nome',1,'p_nome','syntactic_analyzer.py',323),
  ('empty -> <empty>','empty',0,'p_empty','syntactic_analyzer.py',339),
]
